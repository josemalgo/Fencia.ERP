07/02 - Primera prueba del diseño de las clases. InitialMigration
		Añado configuración en la clase de startUp - AddCors, AddDbContext

08/02 - Api Fluent configurar tamaño para las propiedades con una longitud fija person.phone
		Borro Propiedad de navegacion de referencia Employee de la clase Person 
		Creo EmployeesController POST, que llama al metodo Handle de la clase
		RegisterUserInteractor, esta clase devolvera un objeto response que se lo pasaremos al 
		presenter que acabará devolviendo los datos preparados en forma de ViewModel para la
		vista 
		Hay que añadir a la interfaz del contexto todos los DbSets para que desde la interactor
		clase podamos utilizarlos.

09/02 - Preferir las convenciones a las configuraciones.

27/02 - Añado AutoMapper, DependencyInjection en application, GetAllEmployeeDTO queda añadir
		configuración map en clase MappingProfile.

03/03 - Validar campos update 

06/03 - Case Use Customer finished

07/03 - Pendiente de terminar ordersInteractor y OrderValidator
		OrderItem terminado
		Categoies terminado
		Cities terminado

09/03 - Countries terminado
		Address terminado

10/03 - Creo nueva migración. Order.customerId foreign key cambio delete.cascade por delete.noAction
		
		

PREGUNTAS: 
	- Guardar objetos con datos complejos saveAsync Context (Con transaction)
	- User mejor si person hereda o es mejor crear tabla aparte con su relacion

TAREAS:
	- Manejo/prevención de errores mapeo de datos entidad a la base de datos
	- customer y employee al agregar address con saveChanges antes que estos primeros hay que crear transaccion
		para que se completen las dos o ninguna?
	